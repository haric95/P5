let index = 1;
let mult = 1;
let resolution = 1000;
vertexList = [];
class phantom {
  constructor() {
    this.vertices = [
      [-18, -118.72640000000001],
      [-16, -118.72640000000001],
      [-15, -118.72640000000001],
      [-13, -118.72640000000001],
      [-12, -118.72640000000001],
      [-11, -118.72640000000001],
      [-9, -118.72640000000001],
      [-7, -117.72480000000002],
      [-5, -116.72320000000002],
      [-4, -115.7216],
      [-2, -115.7216],
      [-1, -114.72],
      [1, -113.7184],
      [2, -111.71520000000001],
      [4, -110.71360000000001],
      [5, -109.71200000000002],
      [6, -107.7088],
      [8, -106.7072],
      [9, -104.70400000000001],
      [10, -102.70080000000002],
      [11, -100.6976],
      [12, -98.6944],
      [13, -96.69120000000001],
      [14, -95.68960000000001],
      [15, -93.68640000000002],
      [17, -92.6848],
      [19, -90.6816],
      [21, -88.67840000000001],
      [23, -87.67680000000001],
      [25, -86.67520000000002],
      [26, -85.6736],
      [28, -84.672],
      [30, -82.6688],
      [32, -81.66720000000001],
      [33, -79.66400000000002],
      [35, -77.6608],
      [37, -76.6592],
      [39, -74.656],
      [42, -72.65280000000001],
      [43, -70.64960000000002],
      [45, -68.6464],
      [46, -66.64320000000001],
      [49, -64.64000000000001],
      [51, -62.636799999999994],
      [52, -60.6336],
      [54, -57.62880000000001],
      [56, -55.62560000000002],
      [57, -52.6208],
      [59, -50.61760000000001],
      [60, -47.61280000000002],
      [62, -43.60640000000001],
      [64, -40.60160000000002],
      [65, -36.595200000000006],
      [67, -32.58879999999999],
      [68, -29.584000000000003],
      [69, -26.579200000000014],
      [69, -23.574400000000026],
      [71, -20.569600000000037],
      [72, -17.56479999999999],
      [73, -14.560000000000002],
      [74, -11.555200000000013],
      [74, -8.550400000000025],
      [75, -5.545600000000036],
      [75, -3.5423999999999864],
      [76, -1.539199999999994],
      [76, 0.46399999999999864],
      [77, 3.4687999999999874],
      [77, 6.473599999999976],
      [77, 11.481600000000014],
      [78, 15.488],
      [79, 17.491199999999992],
      [79, 20.49599999999998],
      [79, 24.502399999999966],
      [79, 27.50720000000001],
      [79, 30.512],
      [79, 34.518399999999986],
      [78, 38.52479999999997],
      [76, 41.529600000000016],
      [74, 44.534400000000005],
      [72, 46.5376],
      [69, 47.539199999999994],
      [67, 47.539199999999994],
      [65, 46.5376],
      [63, 44.534400000000005],
      [62, 41.529600000000016],
      [63, 47.539199999999994],
      [63, 49.54239999999999],
      [64, 51.54559999999998],
      [65, 55.551999999999964],
      [65, 58.55680000000001],
      [65, 61.5616],
      [65, 64.56639999999999],
      [65, 67.57119999999998],
      [65, 70.57599999999996],
      [64, 74.5824],
      [64, 76.5856],
      [64, 79.59039999999999],
      [64, 81.59359999999998],
      [64, 83.59679999999997],
      [64, 85.59999999999997],
      [64, 88.60480000000001],
      [63, 91.6096],
      [63, 94.61439999999999],
      [63, 97.61919999999998],
      [63, 100.62399999999997],
      [61, 104.63040000000001],
      [61, 108.6368],
      [60, 113.64479999999998],
      [59, 116.64959999999996],
      [58, 120.656],
      [57, 124.66239999999999],
      [56, 129.67039999999997],
      [55, 132.67519999999996],
      [54, 136.6816],
      [53, 140.688],
      [52, 142.69119999999998],
      [50, 146.69759999999997],
      [50, 148.70079999999996],
      [49, 151.7056],
      [47, 153.7088],
      [46, 154.7104],
      [44, 155.712],
      [41, 155.712],
      [38, 154.7104],
      [35, 153.7088],
      [34, 150.704],
      [32, 148.70079999999996],
      [30, 145.69599999999997],
      [29, 142.69119999999998],
      [28, 140.688],
      [28, 138.6848],
      [26, 137.6832],
      [24, 133.67679999999996],
      [23, 130.67199999999997],
      [22, 125.66399999999999],
      [19, 122.6592],
      [19, 119.65440000000001],
      [18, 116.64959999999996],
      [16, 112.64319999999998],
      [14, 109.63839999999999],
      [13, 105.632],
      [12, 100.62399999999997],
      [10, 96.61759999999998],
      [8, 92.6112],
      [7, 89.60640000000001],
      [6, 86.60159999999996],
      [5, 81.59359999999998],
      [4, 85.59999999999997],
      [2, 89.60640000000001],
      [1, 93.6128],
      [0, 96.61759999999998],
      [-1, 100.62399999999997],
      [-2, 103.62880000000001],
      [-3, 107.6352],
      [-4, 112.64319999999998],
      [-5, 116.64959999999996],
      [-6, 119.65440000000001],
      [-7, 123.6608],
      [-8, 127.66719999999998],
      [-9, 131.67359999999996],
      [-10, 134.6784],
      [-12, 137.6832],
      [-14, 139.6864],
      [-17, 140.688],
      [-19, 141.68959999999998],
      [-22, 140.688],
      [-24, 139.6864],
      [-27, 137.6832],
      [-28, 135.68],
      [-29, 133.67679999999996],
      [-31, 130.67199999999997],
      [-32, 127.66719999999998],
      [-34, 124.66239999999999],
      [-35, 121.6576],
      [-37, 118.65280000000001],
      [-38, 115.64799999999997],
      [-39, 111.64159999999998],
      [-41, 107.6352],
      [-43, 103.62880000000001],
      [-44, 100.62399999999997],
      [-46, 95.61599999999999],
      [-48, 91.6096],
      [-49, 89.60640000000001],
      [-51, 84.59839999999997],
      [-52, 78.58879999999999],
      [-53, 74.5824],
      [-55, 71.57759999999996],
      [-55, 68.57279999999997],
      [-55, 65.56799999999998],
      [-55, 61.5616],
      [-57, 65.56799999999998],
      [-59, 67.57119999999998],
      [-62, 67.57119999999998],
      [-65, 67.57119999999998],
      [-67, 65.56799999999998],
      [-68, 63.56479999999999],
      [-70, 58.55680000000001],
      [-71, 54.55039999999997],
      [-72, 50.54399999999998],
      [-73, 47.539199999999994],
      [-73, 43.53280000000001],
      [-73, 40.52799999999996],
      [-73, 37.523199999999974],
      [-74, 32.51519999999999],
      [-74, 28.508800000000008],
      [-75, 24.502399999999966],
      [-76, 19.494399999999985],
      [-76, 15.488],
      [-76, 10.479999999999961],
      [-75, 3.4687999999999874],
      [-75, -2.54079999999999],
      [-75, -5.545600000000036],
      [-74, -10.553600000000017],
      [-73, -13.558400000000006],
      [-72, -15.561599999999999],
      [-71, -18.566399999999987],
      [-70, -21.571200000000033],
      [-69, -25.577600000000018],
      [-67, -28.582400000000007],
      [-66, -31.587199999999996],
      [-65, -33.59039999999999],
      [-63, -36.595200000000006],
      [-61, -39.60000000000002],
      [-59, -41.603200000000015],
      [-58, -44.608000000000004],
      [-56, -47.61280000000002],
      [-54, -50.61760000000001],
      [-52, -52.6208],
      [-49, -55.62560000000002],
      [-48, -57.62880000000001],
      [-46, -59.632000000000005],
      [-44, -60.6336],
      [-41, -62.636799999999994],
      [-39, -63.63840000000002],
      [-41, -67.6448],
      [-42, -71.65120000000002],
      [-43, -74.656],
      [-43, -77.6608],
      [-44, -80.66560000000001],
      [-44, -83.6704],
      [-44, -87.67680000000001],
      [-44, -90.6816],
      [-44, -95.68960000000001],
      [-43, -98.6944],
      [-41, -101.69920000000002],
      [-40, -104.70400000000001],
      [-38, -107.7088],
      [-35, -110.71360000000001],
      [-32, -112.7168],
      [-30, -113.7184],
      [-28, -114.72],
      [-25, -116.72320000000002],
      [-24, -117.72480000000002],
      [-22, -118.72640000000001],
      [-20, -118.72640000000001]
    ];
    this.noiseOffset = 0;
  }

  show() {
    stroke(10);
    noFill();
    beginShape();
    vertex(this.vertices[0], this.vertices[1]);
    for (let i = 1; i < this.vertices.length; i++) {
      vertex(this.vertices[i][0], this.vertices[i][1]);
      let temp = [];
      temp[0] = (this.vertices[i][0] - this.vertices[i - 1][0]) / 2;
      temp[1] = (this.vertices[i][1] - this.vertices[i - 1][1]) / 2;
      vertex(temp[0], temp[1]);
    }
    endShape(CLOSE);
  }

  showWithNoise(scale1, scale2) {
    stroke(10);
    noFill();
    beginShape();
    for (let i = 0; i < this.vertices.length; i++) {
      let input = Math.sin(
        (i * Math.PI * 2) / this.vertices.length + this.noiseOffset
      );
      let noiseVal = noise(input * scale1) * scale2;
      curveVertex(
        this.vertices[i][0] + noiseVal,
        this.vertices[i][1] + noiseVal
      );
    }
    endShape(CLOSE);
    this.noiseOffset += random(-0.5, 0.5) * 0.1;
    if (this.noiseOffset >= Math.TWO_PI) {
      this.noiseOffset = 0;
    }
  }

  scale(value) {
    for (let i = 0; i < this.vertices.length; i++) {
      let temp = [this.vertices[i][0] * value, this.vertices[i][1] * value];
      this.vertices[i] = temp;
    }
  }

  interpolate(values) {
    let temporaryVertices = [];
    for (let i = 1; i < this.vertices.length; i++) {
      let vertex1 = this.vertices[i - 1];
      let vertex2 = this.vertices[i];
      for (let j = 1; j < values + 1; j++) {
        let tempVertex = [vertex1[0], vertex1[1]];
        tempVertex[0] += ((vertex2[0] - vertex1[0]) * j) / values;
        tempVertex[1] += ((vertex2[1] - vertex1[1]) * j) / values;
        temporaryVertices.push(tempVertex);
        console.log(tempVertex);
      }
    }
    this.vertices = temporaryVertices;
  }
}

let phant = new phantom();

// function preload() {
//   img = loadImage("http://127.0.0.1:8887/imgs/phntm.png");
// }

function setup() {
  createCanvas(500, 500);
  background(200);
  translate(width / 2, height / 2);
  phant.interpolate(10);
}

function paper() {
  noStroke();
  for (let i = 0; i < width / 15; i++) {
    for (let j = 0; j < height / 15; j++) {
      let fillColor = random(235, 250);
      fill(fillColor);
      rect(i * 15 + random(15), j * 15 + random(15), 4, 4);
    }
  }
}

function draw() {
  // background(150);
  translate(width / 2, height / 2);
  if (index % 10 == 0) {
    phant.scale(1.05);
    phant.showWithNoise(10, 40);
    index++;
  }
  phant.showWithNoise(10, 20);
  index++;
}

function drawCircleNoise(radius) {
  noFill();
  stroke(100 - radius / 2, radius, 100, 200 - radius / 4);
  beginShape();
  let offset = Math.floor(random(resolution));
  for (let i = 0; i < resolution; i++) {
    let j = i % offset;
    let theta = (i / resolution) * Math.PI * 2;
    let noiseVal = noise((i * mouseX) / 100 / resolution) * 100;
    let outRadius = radius + noiseVal;
    let values = polarToCartaesian(theta, outRadius);
    // console.log(values);
    curveVertex(values[0], values[1]);
  }
  endShape(CLOSE);
}

function testShape() {
  noFill;
  stroke(40);
  strokeWeight(10);
  beginShape();
  vertex(0, 0);
  vertex(100, 0);
  vertex(100, 100);
  vertex(0, 100);
  endShape(CLOSE);
}

function polarToCartaesian(theta, radius) {
  let x = radius * Math.cos(theta);
  let y = radius * Math.sin(theta);
  return [x, y];
}

// function mouseClicked() {
//   vertexList.push([mouseX - 253, mouseY - 145]);
//   console.log(mouseX - 253, mouseY - 145);
//   ellipse(mouseX, mouseY, 2, 2);
// }
